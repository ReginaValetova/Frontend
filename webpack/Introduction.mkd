# Webpack documentation

**Entry** indicates which module webpack should use to begin building out its internal dependency graph. *It defaults ```./src/index.js```*

```js
// webpack.config.js
module.exports = {
  entry: './path/to/my/entry/file.js'
};
```
___

**Output** tells webpack where to emit the *bundles* it creates and how to name these files. *Defaults: ```./dist/main.js```*

```javascript
//webpack.config.js
const path = require('path');

module.exports = {
  entry: './path/to/my/entry/file.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js'
  }
};
```
In the example above, we use the `output.filename` and the `output.path` properties to tell webpack the name of our bundle and where we want it to be emitted to.
___
Out of the box, webpack only understands JavaScript and JSON files. **Loaders** allow webpack to process other types of files and convert them into valid modules that can be consumed by your application and added to the dependency graph.

At a high level,  **loaders**  have two properties in your webpack configuration:

1.  The  `test`  property identifies which file or files should be transformed.
2.  The  `use`  property indicates which loader should be used to do the transforming.
```javascript
const path = require('path');

module.exports = {
  output: {
    filename: 'my-first-webpack.bundle.js'
  },
  module: {
    rules: [
      { test: /\.txt$/, use: 'raw-loader' }
    ]
  }
};
```

> Keep in mind that when using regex to match files, you may not quote it. i.e `/\.txt$/` is not the same as `'/\.txt$/'` or `"/\.txt$/"`.
> The former instructs webpack to match any file that ends with .txt and the latter instructs webpack to match a single file with an absolute path '.txt'; this is likely not your intention.
___

**Plugins** can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.
In order to use a plugin, you need to `require()` it and add it to the `plugins` array.

```javascript
//webpack.config.js

const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm
const webpack = require('webpack'); //to access built-in plugins

module.exports = {
  module: {
    rules: [
      { test: /\.txt$/, use: 'raw-loader' }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({template: './src/index.html'})
  ]
};
```
---
By setting the  **mode**  parameter to either  `development`,  `production`  or  `none`, you can enable webpack's built-in optimizations that correspond to each environment. The default value is  `production`.

```javascript
module.exports = {
  mode: 'production'
};
```
---
**Browser Compatibility** â€“ webpack supports all browsers that are  ES5-compliant  (IE8 and below are not supported). webpack needs  `Promise`  for  `import()`  and  `require.ensure()`. If you want to support older browsers, you will need to  load a polyfill before using these expressions.

---
**Environment**: webpack runs on Node.js version 8.x and higher.